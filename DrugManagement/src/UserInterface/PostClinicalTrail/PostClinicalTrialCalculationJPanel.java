/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PostClinicalTrail;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.PostClinicalPerson.PostClinicalPerson;
import Business.PostClinicalReport.PostClinicalReport;
import Business.Request.Request;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sumanth
 */
public class PostClinicalTrialCalculationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PostClinicalTrialCalculationJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    ArrayList<PostClinicalPerson> persons;
    Request request;
    ArrayList<String> sideEffectName;

    public PostClinicalTrialCalculationJPanel() {
        initComponents();
    }

    PostClinicalTrialCalculationJPanel(JPanel userProcessContainer, UserAccount account, ArrayList<PostClinicalPerson> persons, Request request, ArrayList<String> sideEffectName) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.request = request;
        this.persons = persons;
        this.sideEffectName = sideEffectName;
        jButton1.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        perTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        perTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person Name", "Score", "Drug Valid Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(perTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 170, 640, 430));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 450, 430));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 153, 153));
        jLabel5.setText("Post Clinical Trial Calculation Panel");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 530, -1));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Final Interpretation Score:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 610, 190, 30));

        jTextField1.setEditable(false);
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 610, 240, 30));

        jButton1.setText("Start Computation");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 240, 70));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 650, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) perTable.getModel();
        dtm.setRowCount(0);
        Object[] row = new Object[3];
        new SwingWorker<Void, String>() {
            @Override
            protected Void doInBackground() throws Exception {
                new Thread(new Runnable() {
                    public void run() {
                        for (PostClinicalPerson p : persons) {
                            int val = 0;
                            if (jTextArea1.getText().trim().length() == 0) {
                                jTextArea1.setText(p.getName() + " Calculation Started\n");
                            } else {
                                jTextArea1.append(p.getName() + " Calculation Started\n");
                            }
                            try {
                                Thread.sleep(1500);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(PostClinicalTrialCalculationJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            for (int i = 0; i < 13; i++) {
                                if (i == 5) {
                                    if (sideEffectName.get(0).equals(p.getSideEffects())) {
                                        if (request.getPostClinicalTrialDataEntry().getReportValue().get(i).equals("Increased")) {
                                            if (p.getAge() >= 75) {
                                                val = val + 12;
                                            } else if (p.getAge() < 75 && p.getAge() >= 50) {
                                                val = val + 11;
                                            } else if (p.getAge() < 50 && p.getAge() >= 25) {
                                                val = val + 10;
                                            } else {
                                                val = val + 9;
                                            }
                                        } else {
                                            if (p.getAge() >= 75) {
                                                val = val - 12;
                                            } else if (p.getAge() < 75 && p.getAge() >= 50) {
                                                val = val - 11;
                                            } else if (p.getAge() < 50 && p.getAge() >= 25) {
                                                val = val - 10;
                                            } else {
                                                val = val - 9;
                                            }
                                        }
                                    }
                                } else if (i == 6) {
                                    if (sideEffectName.get(1).equals(p.getSideEffects())) {
                                        if (request.getPostClinicalTrialDataEntry().getReportValue().get(i).equals("Increased")) {
                                            if (p.getAge() >= 75) {
                                                val = val + 10;
                                            } else if (p.getAge() < 75 && p.getAge() >= 50) {
                                                val = val + 8;
                                            } else if (p.getAge() < 50 && p.getAge() >= 25) {
                                                val = val + 6;
                                            } else {
                                                val = val + 4;
                                            }
                                        } else {
                                            if (p.getAge() >= 75) {
                                                val = val - 10;
                                            } else if (p.getAge() < 75 && p.getAge() >= 50) {
                                                val = val - 8;
                                            } else if (p.getAge() < 50 && p.getAge() >= 25) {
                                                val = val - 6;
                                            } else {
                                                val = val - 4;
                                            }
                                        }
                                    }
                                } else if (i == 12) {
                                    if (sideEffectName.get(2).equals(p.getSideEffects())) {
                                        if (request.getPostClinicalTrialDataEntry().getReportValue().get(i).equals("Increased")) {
                                            if (p.getAge() >= 75) {
                                                val = val + 6;
                                            } else if (p.getAge() < 75 && p.getAge() >= 50) {
                                                val = val + 5;
                                            } else if (p.getAge() < 50 && p.getAge() >= 25) {
                                                val = val + 4;
                                            } else {
                                                val = val + 3;
                                            }
                                        } else {
                                            if (p.getAge() >= 75) {
                                                val = val - 6;
                                            } else if (p.getAge() < 75 && p.getAge() >= 50) {
                                                val = val - 5;
                                            } else if (p.getAge() < 50 && p.getAge() >= 25) {
                                                val = val - 4;
                                            } else {
                                                val = val - 3;
                                            }
                                        }
                                    }
                                } else {
                                    val = val + Integer.parseInt(request.getPostClinicalTrialDataEntry().getReportValue().get(i));
                                }
                            }
                            jTextArea1.append(p.getName() + " Calculation Completed\n\n");
                            PostClinicalReport rep = request.getPostClinicalReportDirectory().addClinicalReport();
                            rep.setPostClinicalPerson(p);
                            rep.setFinalReportValue(val);
                            if (val >= 9) {
                                rep.setStatus("Definite Adverse Event");
                            } else if (val < 9 && val >= 5) {
                                rep.setStatus("Probable Adverse Event");
                            } else if (val < 5 && val >= 1) {
                                rep.setStatus("Possible Adverse Event");
                            } else if (val < 1) {
                                rep.setStatus("Doubtful Adverse Event");
                            }
                            row[0] = p;
                            row[1] = val;
                            row[2] = rep.getStatus();
                            dtm.addRow(row);
                            try {
                                Thread.sleep(500);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(PostClinicalTrialCalculationJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }).start();
                 try {
                                Thread.sleep((2000*persons.size())+500);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(PostClinicalTrialCalculationJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                return null;
            }
            protected void done() {
                float finalValue = 0;
                for (PostClinicalReport r : request.getPostClinicalReportDirectory().getPostClinicalReportDirectory()) {
                    finalValue = finalValue + r.getFinalReportValue();
                }
                finalValue = finalValue / request.getPostClinicalReportDirectory().getPostClinicalReportDirectory().size();
                request.setPostCtInterpretationScore(finalValue);
                request.setStatus("Post Clinical Trial Calculation Completed");
                jTextField1.setText(String.valueOf(finalValue));
                jButton1.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Computation Completed");
            }
        }.execute();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        PostClinicalProcessJPanel sysAdminwjp = (PostClinicalProcessJPanel) component;
        sysAdminwjp.compResultJpanel.setEnabled(false);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        // TODO add your handling code here:
        this.jButton1.setBackground(Color.MAGENTA); 

        
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        // TODO add your handling code here:
        
     this.jButton1.setBackground(Color.lightGray); 

    }//GEN-LAST:event_jButton1MouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable perTable;
    // End of variables declaration//GEN-END:variables
}
